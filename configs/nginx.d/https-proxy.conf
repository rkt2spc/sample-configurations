# user    nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
        worker_connections 1024;
}

http {
        # HTTP Server - redirect all requests to HTTPS:
        server {
                listen 80 default_server;
                listen [::]:80 default_server;

                # Letsencrypt acme location:
                location ~ /.well-known/ {
                        allow all;
                        root /var/acme/;
                }

                location / {
                        return 301 https://$host$request_uri;                
                }
        }

        # HTTPS Server - proxy requests on to local Node.js app:
        server {
                listen 443 ssl;
                server_name your_server_name;

                # Use certificate and key and dhparam:
                ssl_certificate your_ssl_certificate;
                ssl_certificate_key your_ssl_certificate_key;
                ssl_dhparam /etc/ssl/certs/dhparam.pem;        

                # cipherlist nginx conf
                ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
                ssl_prefer_server_ciphers on;
                ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
                ssl_ecdh_curve secp384r1;
                ssl_session_cache shared:SSL:10m;
                ssl_session_timeout 10m;
                ssl_session_tickets off;
                ssl_stapling on;
                ssl_stapling_verify on;
                resolver 8.8.8.8 8.8.4.4 valid=300s;
                resolver_timeout 5s;
                add_header Strict-Transport-Security "max-age=63072000; includeSubDomains";
                add_header X-Frame-Options DENY;
                add_header X-Content-Type-Options nosniff;
                
                # Pass requests for / to localhost:8080:
                location / {
                        proxy_set_header X-Real-IP $remote_addr;
                        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                        proxy_set_header X-NginX-Proxy true;
                        proxy_pass your_proxy_pass;
                        proxy_ssl_session_reuse off;
                        proxy_set_header Host $http_host;
                        proxy_cache_bypass $http_upgrade;
                        proxy_redirect off;
                }
        }
}